# -*- coding: utf-8 -*-
"""NFC3.0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sYM3l0FOUcNqdb8WnN4_knaDjbiOjH7J
"""

import numpy as np
import pandas as pd

df = pd.read_excel("Volunteer-match.xlsx")
df

df.columns

df

df.drop(columns = ['Gender','Availability'],axis = 1)

df.isnull().sum()

df.isnull().any()

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

tf = TfidfVectorizer(analyzer='word',ngram_range=(1,2),min_df=0,stop_words='english')

X = df['Skills']
Y = df['Volunteer Name']

tfidf_vectorizer = TfidfVectorizer()
X_tfidf = tfidf_vectorizer.fit_transform(X)

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y_encoded = le.fit_transform(Y)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_tfidf, y_encoded, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
rf = RandomForestClassifier()

rf.fit(X_train,y_train)

y_pred = rf.predict(X_test)

def predict_suitability(skills):
    # Transform the input skills using the same TF-IDF vectorizer
    skills_tfidf = tfidf_vectorizer.transform([skills])
    # Predict the class
    prediction = rf.predict(skills_tfidf)
    # Decode the prediction
    predicted_name = le.inverse_transform(prediction)
    return predicted_name[0]

input_skills = "Teaching"
predicted_volunteer = predict_suitability(input_skills)
print(f"The most suitable volunteer for the skills '{input_skills}' is: {predicted_volunteer}")

df.columns

import pandas as pd

# Load the Excel file into a DataFrame
df = pd.read_excel('/content/Volunteer-match.xlsx')  # Replace 'volunteer_data.xlsx' with your actual file path

# Function to find volunteers by skill
def find_volunteers_by_skill(skill, df):
    # Convert the input skill to lowercase for case-insensitive matching
    skill = skill.lower()

    # Filter the DataFrame for rows where the 'Skills' column contains the input skill
    matched_volunteers = df[df['Skills'].str.lower().str.contains(skill, na=False)]

    # Return the list of names of the matched volunteers
    return matched_volunteers['Volunteer Name'].tolist()

# Example usage
skill_input = input("Enter a skill to search for: ")
volunteer_names = find_volunteers_by_skill(skill_input, df)

if volunteer_names:
    print("Volunteers with skill '{}':".format(skill_input))
    for name in volunteer_names:
        print(name)
else:
    print("No volunteers found with skill '{}'.".format(skill_input))

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Load the Excel file into a DataFrame
df = pd.read_excel('/content/Volunteer-match.xlsx')  # Replace 'volunteer_data.xlsx' with your actual file path

# Fill missing values in 'Skills' with empty string
df['Skills'] = df['Skills'].fillna('')

# Function to recommend volunteers based on input skill
def recommend_volunteers(input_skill, df):
    # Create a TF-IDF Vectorizer to convert text to vectors
    vectorizer = TfidfVectorizer(stop_words='english')

    # Fit and transform the 'Skills' column into TF-IDF vectors
    tfidf_matrix = vectorizer.fit_transform(df['Skills'])

    # Transform the input skill into the same vector space
    input_vector = vectorizer.transform([input_skill])

    # Compute cosine similarity between input skill vector and all other vectors
    cosine_similarities = cosine_similarity(input_vector, tfidf_matrix).flatten()

    # Get the indices of the most similar volunteers (excluding the input itself if it exists in the list)
    similar_indices = cosine_similarities.argsort()[-5:][::-1]  # Get top 5 similar volunteers

    # Get the names of the most similar volunteers
    similar_volunteers = df.iloc[similar_indices]['Volunteer Name']

    # Return the names of similar volunteers
    return similar_volunteers.tolist()

# Example usage
input_skill = input("Enter a skill to find similar volunteers: ")
recommended_volunteers = recommend_volunteers(input_skill, df)

print("Volunteers with similar skills to '{}':".format(input_skill))
for volunteer in recommended_volunteers:
    print(volunteer)

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Load the Excel file into a DataFrame
df = pd.read_excel('/content/Volunteer-match.xlsx')  # Replace with your actual file path

# Fill missing values in 'Skills' with empty string
df['Skills'] = df['Skills'].fillna('')

# Function to recommend volunteers based on input skill
def recommend_volunteers(input_skill, df):
    # Create a TF-IDF Vectorizer to convert text to vectors
    vectorizer = TfidfVectorizer(stop_words='english')

    # Fit and transform the 'Skills' column into TF-IDF vectors
    tfidf_matrix = vectorizer.fit_transform(df['Skills'])

    # Transform the input skill into the same vector space
    input_vector = vectorizer.transform([input_skill])

    # Compute cosine similarity between input skill vector and all other vectors
    cosine_similarities = cosine_similarity(input_vector, tfidf_matrix).flatten()

    # Get the indices of the most similar volunteers (top 5)
    similar_indices = cosine_similarities.argsort()[-5:][::-1]

    # Get the DataFrame with the most similar volunteers and their skills
    similar_volunteers_df = df.iloc[similar_indices][['Volunteer Name', 'Skills']]

    # Return the DataFrame
    return similar_volunteers_df

# Example usage
input_skill = input("Enter a skill to find similar volunteers: ")
recommended_volunteers_df = recommend_volunteers(input_skill, df)

print("Volunteers with similar skills to '{}':".format(input_skill))
for index, row in recommended_volunteers_df.iterrows():
    print("Name: {}, Skills: {}".format(row['Volunteer Name'], row['Skills']))